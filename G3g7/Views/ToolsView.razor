@inherits NoteView
@using Microsoft.AspNetCore.Components.Rendering

<div class="top-row">
    <div>forces:</div>
</div>

@{ DivCosmoses(__builder); }

<hr />

<button @onclick=OnHideValue>@(Options.IsHideValue ? "show frq" : "hide frq")</button>
<button disabled=@(Options.IsHideValue ? "disabled" : null) style=@(Options.IsHideValue ? "text-decoration:line-through;" : null) @onclick=OnIncValue>frq * 2</button>
<button disabled=@(Options.IsHideValue ? "disabled" : null) style=@(Options.IsHideValue ? "text-decoration:line-through;" : null) @onclick=OnDecValue>frq : 2</button>
<button @onclick=OnMonochrome>@(Options.IsMonochrome ? "color on" : "color off")</button>

@code {
    [Parameter] public EventCallback OptionsChanged { get; set; }

    private async Task OnHideValue() {
        Options.IsHideValue = !Options.IsHideValue;
        await OptionsChanged.InvokeAsync();
    }

    private async Task OnIncValue() {
        await Octave.Recalc(Octave, 2d);
        await OptionsChanged.InvokeAsync();
    }

    private async Task OnDecValue() {
        await Octave.Recalc(Octave, 0.5d);
        await OptionsChanged.InvokeAsync();
    }

    private async Task OnMonochrome() {
        Options.IsMonochrome = !Options.IsMonochrome;
        await OptionsChanged.InvokeAsync();
    }

    private async Task OnCosmos(int id) {
        Options.Cosmos = id;
        await OptionsChanged.InvokeAsync();
    }

    private void DivCosmoses(RenderTreeBuilder __builder) {
        var cosmosId = 0;
        foreach (var cosmos in Options.Cosmoses) {
            var z = cosmosId;
            <button class="mainButton" style=@(z == Options.Cosmos ? "color:gold" : null) @onclick="async _ => await OnCosmos(z)">@cosmos</button>
            cosmosId++;
        }
    }
}
